{"version":3,"file":"lesson2-H_K-2gLA.js","sources":["../../src/scripts/lesson2.js"],"sourcesContent":["import * as THREE from 'three'\nimport gsap from 'gsap';\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Object\n */\nconst geometry = new THREE.BoxGeometry(1, 1, 1)\nconst material = new THREE.MeshBasicMaterial({ color: 0xff0000 })\nconst mesh = new THREE.Mesh(geometry, material)\nscene.add(mesh);\n\n// mesh.position.set(1, 0.07, 0.5);\nmesh.position.normalize(); // put to 1 1 1 \n\n// mesh.scale.set(1.2, 1.1, 0.8);\n\nmesh.rotation.reorder('YXZ'); // order of setting, rotate by y then by x.\n// mesh.rotation.set(Math.PI * 0.25, Math.PI * 0.25, 0);\n// better to use quaternion because of rotation order\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: 800,\n    height: 600\n}\n\n/**\n * Camera\n */\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)\ncamera.position.z = 3;\n\nscene.add(camera);\n\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\n\n\n\n/**\n * Animations\n * tick - a function which will be called on every next free frame\n */\n\n/**\n * V1 with delta time\n */\n// let prevTime = Date.now();\n\n// const tick = () => {\n//     // problem: the higher frame rate - the faster animation\n//     // solution - check time\n//     const currentTime = Date.now();\n//     const deltaTime = currentTime - prevTime;\n\n//     prevTime = currentTime;\n\n//     mesh.rotation.y += 0.001 * deltaTime;\n\n//     // take a picture\n//     renderer.render(scene, camera);\n//     window.requestAnimationFrame(tick);\n// }\n\n// tick();\n\n\n/**\n * V1 with Clock\n */\n\n// const clock = new THREE.Clock();\n\n// const tick = () => {\n//     // clock\n//     const elapsedTime = clock.getElapsedTime();\n\n//     // mesh.rotation.y = Math.PI * elapsedTime;\n//     mesh.rotation.y = Math.cos(elapsedTime);\n//     // mesh.position.y = Math.sin(elapsedTime);\n//     // mesh.position.x = Math.cos(elapsedTime);\n//     camera.position.y = Math.sin(elapsedTime);\n//     camera.position.x = Math.cos(elapsedTime);\n//     camera.lookAt(mesh.position);\n\n//     // take a picture\n//     renderer.render(scene, camera);\n//     window.requestAnimationFrame(tick);\n// }\n\n// tick();\n\n\n/**\n * V3 with GSAP\n */\n\ngsap.to(mesh.position, {\n    x: 2,\n    duration: 2,\n    delay: 0\n});\ngsap.to(mesh.position, {\n    x: -1,\n    duration: 1,\n    delay: 2\n});\n\n\nconst tick = () => {\n    // take a picture\n    renderer.render(scene, camera);\n    window.requestAnimationFrame(tick);\n}\n\ntick();"],"names":["canvas","scene","THREE.Scene","geometry","THREE.BoxGeometry","material","THREE.MeshBasicMaterial","mesh","THREE.Mesh","sizes","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer","gsap","tick"],"mappings":"sJAIA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAG9CC,EAAQ,IAAIC,EAKZC,EAAW,IAAIC,EAAkB,EAAG,EAAG,CAAC,EACxCC,EAAW,IAAIC,EAAwB,CAAE,MAAO,QAAU,CAAA,EAC1DC,EAAO,IAAIC,EAAWL,EAAUE,CAAQ,EAC9CJ,EAAM,IAAIM,CAAI,EAGdA,EAAK,SAAS,YAIdA,EAAK,SAAS,QAAQ,KAAK,EAQ3B,MAAME,EAAQ,CACV,MAAO,IACP,OAAQ,GACZ,EAKMC,EAAS,IAAIC,EAAwB,GAAIF,EAAM,MAAQA,EAAM,MAAM,EACzEC,EAAO,SAAS,EAAI,EAEpBT,EAAM,IAAIS,CAAM,EAMhB,MAAME,EAAW,IAAIC,EAAoB,CACrC,OAAQb,CACZ,CAAC,EACDY,EAAS,QAAQH,EAAM,MAAOA,EAAM,MAAM,EA8D1CK,EAAK,GAAGP,EAAK,SAAU,CACnB,EAAG,EACH,SAAU,EACV,MAAO,CACX,CAAC,EACDO,EAAK,GAAGP,EAAK,SAAU,CACnB,EAAG,GACH,SAAU,EACV,MAAO,CACX,CAAC,EAGD,MAAMQ,EAAO,IAAM,CAEfH,EAAS,OAAOX,EAAOS,CAAM,EAC7B,OAAO,sBAAsBK,CAAI,CACrC,EAEAA,EAAM"}