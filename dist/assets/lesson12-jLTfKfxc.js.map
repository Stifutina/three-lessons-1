{"version":3,"file":"lesson12-jLTfKfxc.js","sources":["../../node_modules/three/examples/jsm/misc/Timer.js","../../node_modules/three/examples/jsm/objects/Sky.js","../../src/scripts/lesson12.js"],"sourcesContent":["class Timer {\n\n\tconstructor() {\n\n\t\tthis._previousTime = 0;\n\t\tthis._currentTime = 0;\n\t\tthis._startTime = now();\n\n\t\tthis._delta = 0;\n\t\tthis._elapsed = 0;\n\n\t\tthis._timescale = 1;\n\n\t\t// use Page Visibility API to avoid large time delta values\n\n\t\tthis._usePageVisibilityAPI = ( typeof document !== 'undefined' && document.hidden !== undefined );\n\n\t\tif ( this._usePageVisibilityAPI === true ) {\n\n\t\t\tthis._pageVisibilityHandler = handleVisibilityChange.bind( this );\n\n\t\t\tdocument.addEventListener( 'visibilitychange', this._pageVisibilityHandler, false );\n\n\t\t}\n\n\t}\n\n\tgetDelta() {\n\n\t\treturn this._delta / 1000;\n\n\t}\n\n\tgetElapsed() {\n\n\t\treturn this._elapsed / 1000;\n\n\t}\n\n\tgetTimescale() {\n\n\t\treturn this._timescale;\n\n\t}\n\n\tsetTimescale( timescale ) {\n\n\t\tthis._timescale = timescale;\n\n\t\treturn this;\n\n\t}\n\n\treset() {\n\n\t\tthis._currentTime = now() - this._startTime;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this._usePageVisibilityAPI === true ) {\n\n\t\t\tdocument.removeEventListener( 'visibilitychange', this._pageVisibilityHandler );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( timestamp ) {\n\n\n\t\tif ( this._usePageVisibilityAPI === true && document.hidden === true ) {\n\n\t\t\tthis._delta = 0;\n\n\t\t} else {\n\n\t\t\tthis._previousTime = this._currentTime;\n\t\t\tthis._currentTime = ( timestamp !== undefined ? timestamp : now() ) - this._startTime;\n\n\t\t\tthis._delta = ( this._currentTime - this._previousTime ) * this._timescale;\n\t\t\tthis._elapsed += this._delta; // _elapsed is the accumulation of all previous deltas\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass FixedTimer extends Timer {\n\n\tconstructor( fps = 60 ) {\n\n\t\tsuper();\n\t\tthis._delta = ( 1 / fps ) * 1000;\n\n\t}\n\n\tupdate() {\n\n\t\tthis._elapsed += ( this._delta * this._timescale ); // _elapsed is the accumulation of all previous deltas\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now();\n\n}\n\nfunction handleVisibilityChange() {\n\n\tif ( document.hidden === false ) this.reset();\n\n}\n\nexport { Timer, FixedTimer };\n","import {\n\tBackSide,\n\tBoxGeometry,\n\tMesh,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector3\n} from 'three';\n\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://simonwallner.at/project/atmospheric-scattering/\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nclass Sky extends Mesh {\n\n\tconstructor() {\n\n\t\tconst shader = Sky.SkyShader;\n\n\t\tconst material = new ShaderMaterial( {\n\t\t\tname: shader.name,\n\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\tsuper( new BoxGeometry( 1, 1, 1 ), material );\n\n\t\tthis.isSky = true;\n\n\t}\n\n}\n\nSky.SkyShader = {\n\n\tname: 'SkyShader',\n\n\tuniforms: {\n\t\t'turbidity': { value: 2 },\n\t\t'rayleigh': { value: 1 },\n\t\t'mieCoefficient': { value: 0.005 },\n\t\t'mieDirectionalG': { value: 0.8 },\n\t\t'sunPosition': { value: new Vector3() },\n\t\t'up': { value: new Vector3( 0, 1, 0 ) }\n\t},\n\n\tvertexShader: /* glsl */`\n\t\tuniform vec3 sunPosition;\n\t\tuniform float rayleigh;\n\t\tuniform float turbidity;\n\t\tuniform float mieCoefficient;\n\t\tuniform vec3 up;\n\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\t// constants for atmospheric scattering\n\t\tconst float e = 2.71828182845904523536028747135266249775724709369995957;\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\t// wavelength of used primaries, according to preetham\n\t\tconst vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\tconst vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\tconst float v = 4.0;\n\t\tconst vec3 K = vec3( 0.686, 0.678, 0.666 );\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\tconst vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\tconst float cutoffAngle = 1.6110731556870734;\n\t\tconst float steepness = 1.5;\n\t\tconst float EE = 1000.0;\n\n\t\tfloat sunIntensity( float zenithAngleCos ) {\n\t\t\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\n\t\t\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\n\t\t}\n\n\t\tvec3 totalMie( float T ) {\n\t\t\tfloat c = ( 0.2 * T ) * 10E-18;\n\t\t\treturn 0.434 * c * MieConst;\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvWorldPosition = worldPosition.xyz;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n\t\t\tvSunDirection = normalize( sunPosition );\n\n\t\t\tvSunE = sunIntensity( dot( vSunDirection, up ) );\n\n\t\t\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\n\n\t\t\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\n\n\t\t\t// extinction (absorbtion + out scattering)\n\t\t\t// rayleigh coefficients\n\t\t\tvBetaR = totalRayleigh * rayleighCoefficient;\n\n\t\t\t// mie coefficients\n\t\t\tvBetaM = totalMie( turbidity ) * mieCoefficient;\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\tuniform float mieDirectionalG;\n\t\tuniform vec3 up;\n\n\t\t// constants for atmospheric scattering\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\tconst float n = 1.0003; // refractive index of air\n\t\tconst float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\tconst float rayleighZenithLength = 8.4E3;\n\t\tconst float mieZenithLength = 1.25E3;\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\tconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\tconst float THREE_OVER_SIXTEENPI = 0.05968310365946075;\n\t\t// 1.0 / ( 4.0 * pi )\n\t\tconst float ONE_OVER_FOURPI = 0.07957747154594767;\n\n\t\tfloat rayleighPhase( float cosTheta ) {\n\t\t\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\n\t\t}\n\n\t\tfloat hgPhase( float cosTheta, float g ) {\n\t\t\tfloat g2 = pow( g, 2.0 );\n\t\t\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\n\t\t\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec3 direction = normalize( vWorldPosition - cameraPosition );\n\n\t\t\t// optical length\n\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\n\t\t\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\n\t\t\tfloat sR = rayleighZenithLength * inverse;\n\t\t\tfloat sM = mieZenithLength * inverse;\n\n\t\t\t// combined extinction factor\n\t\t\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\n\n\t\t\t// in scattering\n\t\t\tfloat cosTheta = dot( direction, vSunDirection );\n\n\t\t\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\n\t\t\tvec3 betaRTheta = vBetaR * rPhase;\n\n\t\t\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );\n\t\t\tvec3 betaMTheta = vBetaM * mPhase;\n\n\t\t\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\n\t\t\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\n\n\t\t\t// nightsky\n\t\t\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]\n\t\t\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]\n\t\t\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\n\t\t\tvec3 L0 = vec3( 0.1 ) * Fex;\n\n\t\t\t// composition + solar disc\n\t\t\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\n\t\t\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;\n\n\t\t\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\n\n\t\t\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\n\n\t\t\tgl_FragColor = vec4( retColor, 1.0 );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\n\t\t}`\n\n};\n\nexport { Sky };\n","import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { Timer } from 'three/addons/misc/Timer.js'\nimport GUI from 'lil-gui'\nimport { Sky } from 'three/examples/jsm/Addons.js'\n\n// Finding textures is always hard and doing a web search doesn’t always \n// highlight the best places. That’s why I’ve created a Notion page gathering \n// some of my favorite assets libraries: \n// https://www.notion.so/brunosimon/Assets-953f65558015455eb65d38a7a5db7171?pvs=4\n\n\n/**\n * \n * \nSquoosh: One file at a time, a lot of options, live preview\nCloudConvert: Multiple files at a time, 25 images daily with a user account, some options\nTinyPNG: Multiple files at a time, limited but you can just wait for a while, no option\nAnd there are many local solutions, NPM libraries, extensions, etc.:\n\nhttps://sharp.pixelplumbing.com\nhttps://compressx.app\nhttps://file-converter.io\nhttps://optimage.app\nhttps://apps.apple.com/gb/app/pym/id1451733095\n * \n * \n */\n\n/**\n * Base\n */\n// Debug\nconst gui = new GUI()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader();\n\nconst skyTexture = textureLoader.load('/textures/environmentMap/2k.hdr');\n\n// Floor\nconst floorAlphaTexture = textureLoader.load('/textures/floor/alpha.webp');\nconst floorColorTexture = textureLoader.load('/textures/floor/coast_sand_rocks_02_1k/coast_sand_rocks_02_diff_1k.webp');\nconst floorDisplacementTexture = textureLoader.load('/textures/floor/coast_sand_rocks_02_1k/coast_sand_rocks_02_disp_1k.webp');\nconst floorNormalTexture = textureLoader.load('/textures/floor/coast_sand_rocks_02_1k/coast_sand_rocks_02_nor_gl_1k.webp');\nconst floorARMTexture = textureLoader.load('/textures/floor/coast_sand_rocks_02_1k/coast_sand_rocks_02_arm_1k.webp');\n\nfloorColorTexture.wrapS = THREE.RepeatWrapping;\nfloorColorTexture.wrapT = THREE.RepeatWrapping;\nfloorColorTexture.repeat.set(8, 8);\nfloorNormalTexture.wrapS = THREE.RepeatWrapping;\nfloorNormalTexture.wrapT = THREE.RepeatWrapping;\nfloorNormalTexture.repeat.set(8, 8);\nfloorDisplacementTexture.wrapS = THREE.RepeatWrapping;\nfloorDisplacementTexture.wrapT = THREE.RepeatWrapping;\nfloorDisplacementTexture.repeat.set(8, 8);\nfloorARMTexture.wrapS = THREE.RepeatWrapping;\nfloorARMTexture.wrapT = THREE.RepeatWrapping;\nfloorARMTexture.repeat.set(8, 8);\n\nfloorColorTexture.colorSpace = THREE.SRGBColorSpace;\n\n\n// Walls\nconst wallsColorTexture = textureLoader.load('/textures/wall/castle_brick_broken_06_1k/castle_brick_broken_06_diff_1k.webp');\nconst wallsNormalTexture = textureLoader.load('/textures/wall/castle_brick_broken_06_1k/castle_brick_broken_06_nor_gl_1k.webp');\nconst wallsARMTexture = textureLoader.load('/textures/wall/castle_brick_broken_06_1k/castle_brick_broken_06_arm_1k.webp');\n\nwallsColorTexture.colorSpace = THREE.SRGBColorSpace;\n\n\n// Roof\nconst roofColorTexture = textureLoader.load('/textures/roof/roof_slates_02_1k/roof_slates_02_diff_1k.webp');\nconst roofARMTexture = textureLoader.load('/textures/roof/roof_slates_02_1k/roof_slates_02_arm_1k.webp');\nconst roofNormalTexture = textureLoader.load('/textures/roof/roof_slates_02_1k/roof_slates_02_nor_gl_1k.webp');\n\nroofColorTexture.colorSpace = THREE.SRGBColorSpace;\n\nroofColorTexture.repeat.set(2.4, 1);\nroofARMTexture.repeat.set(2.4, 1);\nroofNormalTexture.repeat.set(2.4, 1);\nroofColorTexture.wrapS = THREE.RepeatWrapping;\nroofARMTexture.wrapS = THREE.RepeatWrapping;\nroofNormalTexture.wrapS = THREE.RepeatWrapping;\nroofColorTexture.wrapT = THREE.RepeatWrapping;\nroofARMTexture.wrapT = THREE.RepeatWrapping;\nroofNormalTexture.wrapT = THREE.RepeatWrapping;\n\n\n// Bushes\nconst bushColorTexture = textureLoader.load('/textures/bush/leaves_forest_ground_1k/leaves_forest_ground_diff_1k.webp');\nconst bushNormalTexture = textureLoader.load('/textures/bush/leaves_forest_ground_1k/leaves_forest_ground_nor_gl_1k.webp');\nconst bushARMTexture = textureLoader.load('/textures/bush/leaves_forest_ground_1k/leaves_forest_ground_arm_1k.webp');\n\nbushColorTexture.colorSpace = THREE.SRGBColorSpace;\n\n// Stones\nconst stoneColorTexture = textureLoader.load('/textures/grave/plastered_stone_wall_1k/plastered_stone_wall_diff_1k.webp');\nconst stoneNormalTexture = textureLoader.load('/textures/grave/plastered_stone_wall_1k/plastered_stone_wall_nor_gl_1k.webp');\nconst stoneARMTexture = textureLoader.load('/textures/grave/plastered_stone_wall_1k/plastered_stone_wall_arm_1k.webp');\n\nstoneColorTexture.colorSpace = THREE.SRGBColorSpace;\n\nstoneColorTexture.wrapS = THREE.RepeatWrapping;\nstoneARMTexture.wrapS = THREE.RepeatWrapping;\nstoneNormalTexture.wrapS = THREE.RepeatWrapping;\nstoneColorTexture.wrapT = THREE.RepeatWrapping;\nstoneARMTexture.wrapT = THREE.RepeatWrapping;\nstoneNormalTexture.wrapT = THREE.RepeatWrapping;\n\n\n// Door\nconst doorColorTexture = textureLoader.load('/textures/door/color.jpg');\nconst doorAlphaTexture = textureLoader.load('/textures/door/alpha.jpg');\nconst doorHeightTexture = textureLoader.load('/textures/door/height.jpg');\nconst doorNormalTexture = textureLoader.load('/textures/door/normal.jpg');\nconst doorMetalnessTexture = textureLoader.load('/textures/door/metalness.jpg');\nconst doorRoughnessTexture = textureLoader.load('/textures/door/roughness.jpg');\nconst doorAmbientOcclusionTexture = textureLoader.load('/textures/door/ambientOcclusion.jpg');\n\n\n\n\n/**\n * House\n */\n// Floor\nconst floor = new THREE.Mesh(\n    new THREE.PlaneGeometry(30, 30, 200, 200),\n    new THREE.MeshStandardMaterial({ \n        alphaMap: floorAlphaTexture, \n        map: floorColorTexture,\n        normalMap: floorNormalTexture,\n        displacementMap: floorDisplacementTexture,\n        displacementScale: 0.3,\n        displacementBias: -0.2, // to prevent moving the floor up because of too light texture\n        aoMap: floorARMTexture,\n        roughnessMap: floorARMTexture,\n        metalnessMap: floorARMTexture,\n        transparent: true \n    })\n);\n\nfloor.rotation.x = - Math.PI * 0.5;\n\nscene.add(floor);\n\n// Group\nconst house = new THREE.Group();\nconst stones = new THREE.Group();\n\nscene.add(house, stones);\n\n// Walls\nconst walls = new THREE.Mesh(\n    new THREE.BoxGeometry(4, 2.5, 4),\n    new THREE.MeshStandardMaterial({ \n        map: wallsColorTexture,\n        normalMap: wallsNormalTexture,\n        aoMap: wallsARMTexture,\n        roughnessMap: wallsARMTexture,\n        metalnessMap: wallsARMTexture\n    })\n);\n\nwalls.position.y = 1.25;\nhouse.add(walls);\n\n\n// Roof\nconst roof = new THREE.Mesh(\n    new THREE.ConeGeometry(3.5, 1.8, 4),\n    new THREE.MeshStandardMaterial({ \n        map: roofColorTexture,\n        aoMap: roofARMTexture,\n        roughnessMap: roofARMTexture,\n        metalnessMap: roofARMTexture,\n        normalMap: roofNormalTexture\n    })\n);\n\n// Set correct rotation for pyramid geometry texture and prevent skewing\nroofColorTexture.rotation = Math.PI * - 0.04;\nroofARMTexture.rotation = Math.PI * - 0.04;\nroofNormalTexture.rotation = Math.PI * - 0.04;\n\n\nroof.rotation.y = Math.PI * 0.25;\nroof.position.y = 2.5 + 0.75;\nhouse.add(roof);\n\n\n// Door\nconst door = new THREE.Mesh(\n    new THREE.PlaneGeometry(2, 2, 80, 80),\n    new THREE.MeshStandardMaterial({\n        alphaMap: doorAlphaTexture,\n        map: doorColorTexture,\n        normalMap: doorNormalTexture,\n        displacementMap: doorHeightTexture,\n        displacementScale: 0.1,\n        metalnessMap: doorMetalnessTexture,\n        roughnessMap: doorRoughnessTexture,\n        aoMap: doorAmbientOcclusionTexture,\n        transparent: true\n    })\n);\n\ndoor.position.z = 2 + 0.01;\ndoor.position.y = 1;\nhouse.add(door);\n\n// Bushes\nconst bushGeometry = new THREE.SphereGeometry(1, 16, 16);\nconst bushMaterial = new THREE.MeshStandardMaterial({ \n    map: bushColorTexture,\n    normalMap: bushNormalTexture,\n    aoMap: bushARMTexture,\n    roughnessMap: bushARMTexture,\n    metalnessMap: bushARMTexture,\n    color: '#ccffcc'\n});\n\nconst bush1 = new THREE.Mesh(bushGeometry, bushMaterial);\nbush1.scale.set(0.5, 0.5, 0.5);\nbush1.position.set(0.8, 0.3, 2.3);\nbush1.rotation.x = Math.PI * 0.75;\n\nconst bush2 = bush1.clone();\nbush2.position.set(1.5, 0.2, 2.4);\nbush2.scale.set(0.4, 0.4, 0.4);\nbush2.rotation.x = Math.PI * 0.75;\n\nconst bush3 = bush1.clone();\nbush3.position.set(-1, 0.1, 2.6);\nbush3.scale.set(0.15, 0.15, 0.15);\nbush3.rotation.x = Math.PI * 0.75;\n\nconst bush4 = bush1.clone();\nbush4.position.set(-1.5, 0.35, 2.3);\nbush4.scale.set(0.5, 0.5, 0.5);\nbush4.rotation.x = Math.PI * 0.75;\n\nscene.add(bush1, bush2, bush3, bush4);\n\n// Stones\nconst stoneGeometry = new THREE.DodecahedronGeometry(1, 0);\nconst stonesMaterial = new THREE.MeshStandardMaterial({\n    map: stoneColorTexture,\n    normalMap: stoneNormalTexture,\n    aoMap: stoneARMTexture,\n    roughnessMap: stoneARMTexture,\n    metalnessMap: stoneARMTexture,\n})\n\nfor (let i = 0; i < 30; i++) {\n    const angle = Math.random() * Math.PI * 2;\n    const radius = 5.5 + Math.random() * 5;\n    const x = Math.sin(angle) * radius;\n    const z = Math.cos(angle) * radius;\n\n    const stone = new THREE.Mesh(stoneGeometry, stonesMaterial);\n    const size = Math.random() + 0.1;\n    \n    stone.scale.setScalar(size);\n    stone.position.set(x, size * 0.2, z);\n    stone.rotation.x = (Math.random() - 0.5);\n    stone.rotation.y = (Math.random() - 0.5);\n    stone.rotation.z = (Math.random() - 0.5);\n\n    stone.castShadow = true;\n    stone.receiveShadow = true;\n\n    stones.add(stone);\n}\n\n/**\n * Lights\n */\n// Ambient light\nconst ambientLight = new THREE.AmbientLight('#86cdff', 0.175)\nscene.add(ambientLight)\n\n// Directional light\nconst directionalLight = new THREE.DirectionalLight('#86cdff', 1)\ndirectionalLight.position.set(3, 2, -8)\nscene.add(directionalLight)\n\nconst doorLight = new THREE.PointLight('#ff7d46', 1, 7);\ndoorLight.position.set(0, 2.2, 2.5);\nhouse.add(doorLight);\n\n\n/**\n * Flying lights\n */\nconst light1 = new THREE.PointLight('#ff0088', 5, 7);\nconst light2 = new THREE.PointLight('#8800ff', 5, 7);\nconst light3 = new THREE.PointLight('#ff0000', 5, 7);\n\nscene.add(light1, light2, light3);\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n\n\n\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 4\ncamera.position.y = 2\ncamera.position.z = 5\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n/**\n * Shadows\n */\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n// Cast and receive\ndirectionalLight.castShadow = true;\nlight1.castShadow = true;\nlight2.castShadow = true;\nlight3.castShadow = true;\n\nfloor.receiveShadow = true;\nwalls.receiveShadow = true;\nroof.castShadow = true;\nwalls.castShadow = true;\n\n// Mapping\ndirectionalLight.shadow.mapSize.width = 256;\ndirectionalLight.shadow.mapSize.height = 256;\ndirectionalLight.shadow.camera.top = 8;\ndirectionalLight.shadow.camera.right = 8;\ndirectionalLight.shadow.camera.bottom = - 8;\ndirectionalLight.shadow.camera.left = - 8;\ndirectionalLight.shadow.camera.near = 1;\ndirectionalLight.shadow.camera.far = 1;\n\n\n/** Sky */\nconst sky = new Sky();\n\nsky.scale.setScalar(10000);\n\nsky.material.uniforms.turbidity.value = 10;\nsky.material.uniforms.rayleigh.value = 3;\nsky.material.uniforms.mieCoefficient.value = 0.1;\nsky.material.uniforms.mieDirectionalG.value = 0.95;\nsky.material.uniforms.sunPosition.value = new THREE.Vector3(0.3, -0.038, -0.95);\n\nscene.add(sky);\n\n/**\n * Fog\n */\n// scene.fog = new THREE.Fog('#262837', 1, 15);\nscene.fog = new THREE.FogExp2('#02343f', 0.1);\n\n\n\n/**\n * Animate\n */\nconst timer = new Timer()\n\n//You can test that easily and find frequencies that look unpredictable \n//using mathematic formulas and visualisation tools such as the Desmos Calculator.\n// https://www.desmos.com/calculator\nconst tick = () =>\n{\n    // Timer\n    timer.update()\n    const elapsedTime = timer.getElapsed();\n\n    // Update flying lights\n    const lightAngle1 = elapsedTime * 0.5;\n\n    light1.position.x = Math.cos(lightAngle1) * 7;\n    light1.position.z = Math.sin(lightAngle1) * 7;\n    light1.position.y = Math.sin(lightAngle1) * Math.sin(lightAngle1 * 2.34) * Math.sin(lightAngle1 * 3.45);\n\n    const lightAngle2 = - elapsedTime * 0.38;\n\n    light2.position.x = Math.cos(lightAngle2) * 4;\n    light2.position.z = Math.sin(lightAngle2) * 4;\n    light2.position.y = Math.sin(lightAngle2) * Math.sin(lightAngle2 * 2.746) * Math.sin(lightAngle2 * 4.785);\n    \n    const lightAngle3 = - elapsedTime * 0.78;\n\n    light3.position.x = Math.cos(lightAngle3) * 8;\n    light3.position.z = Math.sin(lightAngle3) * 7.4;\n    light3.position.y = Math.sin(lightAngle3) * Math.sin(lightAngle3 * 2.746) * Math.sin(lightAngle3 * 4.785);\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["Timer","now","handleVisibilityChange","timescale","timestamp","Sky","Mesh","shader","material","ShaderMaterial","UniformsUtils","BackSide","BoxGeometry","Vector3","GUI","canvas","scene","THREE.Scene","textureLoader","THREE.TextureLoader","floorAlphaTexture","floorColorTexture","floorDisplacementTexture","floorNormalTexture","floorARMTexture","THREE.RepeatWrapping","THREE.SRGBColorSpace","wallsColorTexture","wallsNormalTexture","wallsARMTexture","roofColorTexture","roofARMTexture","roofNormalTexture","bushColorTexture","bushNormalTexture","bushARMTexture","stoneColorTexture","stoneNormalTexture","stoneARMTexture","doorColorTexture","doorAlphaTexture","doorHeightTexture","doorNormalTexture","doorMetalnessTexture","doorRoughnessTexture","doorAmbientOcclusionTexture","floor","THREE.Mesh","THREE.PlaneGeometry","THREE.MeshStandardMaterial","house","THREE.Group","stones","walls","THREE.BoxGeometry","roof","THREE.ConeGeometry","door","bushGeometry","THREE.SphereGeometry","bushMaterial","bush1","bush2","bush3","bush4","stoneGeometry","THREE.DodecahedronGeometry","stonesMaterial","i","angle","radius","x","z","stone","size","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","doorLight","THREE.PointLight","light1","light2","light3","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","sky","THREE.Vector3","THREE.FogExp2","timer","tick","elapsedTime","lightAngle1","lightAngle2","lightAngle3"],"mappings":"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","x_google_ignoreList":[0,1]}