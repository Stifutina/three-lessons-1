{"version":3,"file":"lesson9-CNe3irsJ.js","sources":["../../node_modules/three/examples/jsm/geometries/TextGeometry.js","../../node_modules/three/examples/jsm/loaders/FontLoader.js","../../src/scripts/lesson9.js"],"sourcesContent":["/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  depth: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tif ( parameters.depth === undefined && parameters.height !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.TextGeometry: .height is now depreciated. Please use .depth instead' ); // @deprecated, r163\n\n\t\t\t}\n\n\t\t\tparameters.depth = parameters.depth !== undefined ?\n\t\t\t\tparameters.depth : parameters.height !== undefined ?\n\t\t\t\t\tparameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n","import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n","import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js'\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js'\n// import { mergeVertices } from 'three/examples/jsm/utils/BufferGeometryUtils.js'\n\n// Font Converter - https://gero3.github.io/facetype.js/\n\n/**\n * Base\n */\n// Debug\n// const gui = new GUI()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene();\nconst group = new THREE.Group();\n\n// Axes helper\n// const axesHelper = new THREE.AxesHelper(2);\n// scene.add(axesHelper);\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader();\n\nconst matcapTexture = textureLoader.load('/textures/matcaps/7.png');\n\nmatcapTexture.colorSpace = THREE.SRGBColorSpace;\n\nconst matcapMaterial = new THREE.MeshMatcapMaterial({\n    matcap: matcapTexture\n})\n\n/**\n * Fonts\n */\nconst fontLoader = new FontLoader();\n\nfontLoader.load('/fonts/helvetiker_regular.typeface.json', (font) => {\n   const textMesh = new THREE.Mesh(\n       new TextGeometry('Hello Three.js', {\n           font: font,\n           size: 0.5,\n           depth: 0.2,\n           curveSegments: 6, // smoothness of the text, influences performance\n           bevelEnabled: true,\n           bevelThickness: 0.03,\n           bevelSize: 0.02,\n           bevelOffset: 0,\n           bevelSegments: 5\n       }),\n       matcapMaterial\n   );\n\n    // textMesh.geometry.computeBoundingBox();\n    // textMesh.geometry.translate(\n    //     (-textMesh.geometry.boundingBox.max.x - 0.02) * 0.5, // bevelSize\n    //     (-textMesh.geometry.boundingBox.max.y - 0.02) * 0.5, // bevelSize\n    //     (-textMesh.geometry.boundingBox.max.z - 0.03) * 0.5 // bevelThickness\n    // );\n\n    textMesh.geometry.center(); // faster way to center the text\n\n    // textMesh.geometry = new mergeVertices(textMesh.geometry, 0.0001);\n    // textMesh.geometry.computeVertexNormals();\n   \n   scene.add(textMesh);\n\n   const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n\n   \n\n   for (let i = 0; i < 1000; i++) {\n    const donut = new THREE.Mesh(\n        donutGeometry,\n        matcapMaterial\n    );\n\n    donut.position.x = 0.5 + (Math.random() - 0.5) * 100;\n    donut.position.y = 0.5 + (Math.random() - 0.5) * 100;\n    donut.position.z = 0.5 + (Math.random() - 0.5) * 100;\n\n    donut.rotation.x = Math.random() * Math.PI;\n    donut.rotation.y = Math.random() * Math.PI;\n\n    donut.scale.setScalar(Math.random() * 0.5);\n\n    group.add(donut);\n   }\n\n   scene.add(group);\n});\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(60, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 1\ncamera.position.y = 1\ncamera.position.z = 2\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime();\n\n    group.rotation.x = elapsedTime * 0.06;\n    group.rotation.y = elapsedTime * 0.08;\n    group.rotation.z = elapsedTime * 0.1;\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["TextGeometry","ExtrudeGeometry","text","parameters","font","shapes","FontLoader","Loader","manager","url","onLoad","onProgress","onError","scope","loader","FileLoader","json","Font","data","size","paths","createPaths","p","pl","chars","scale","line_height","offsetX","offsetY","i","char","ret","createPath","glyph","path","ShapePath","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","l","canvas","scene","THREE.Scene","group","THREE.Group","textureLoader","THREE.TextureLoader","matcapTexture","THREE.SRGBColorSpace","matcapMaterial","THREE.MeshMatcapMaterial","fontLoader","textMesh","THREE.Mesh","donutGeometry","THREE.TorusGeometry","donut","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","clock","THREE.Clock","tick","elapsedTime"],"mappings":"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","x_google_ignoreList":[0,1]}