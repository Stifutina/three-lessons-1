{"version":3,"file":"lesson16-V6uucmTT.js","sources":["../../src/scripts/lesson16.js"],"sourcesContent":["import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'\nimport * as CANNON from 'cannon-es';\n\n/**\n * Physics. \n * There are many physics libraries for Three.js, but the most popular one is cannon.js.\n * We need to decide if we want to use 2D or 3D physics. Some 3D interactions ight be reduced to 2D physics.\n * \n * 3D Physics libraries:\n * Ammo js\n * Cannon js\n * Oimo js\n * \n * 2D Physics libraries:\n * Matter js\n * P2 js\n * Planck js\n * Box2D js\n */\n\n/**\n * Debug\n */\nconst gui = new GUI()\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader()\nconst cubeTextureLoader = new THREE.CubeTextureLoader()\n\nconst environmentMapTexture = cubeTextureLoader.load([\n    '/textures/environmentMaps/0/px.png',\n    '/textures/environmentMaps/0/nx.png',\n    '/textures/environmentMaps/0/py.png',\n    '/textures/environmentMaps/0/ny.png',\n    '/textures/environmentMaps/0/pz.png',\n    '/textures/environmentMaps/0/nz.png'\n])\n\n\n/**\n * Physics\n */\n// World\nconst world = new CANNON.World();\n\nworld.gravity.set(0, -9.82, 0);\n\n// Materials\n// Material is a BEHAVIOUR property of body\n// this are not visible, but they are used to define how bodies interact with each other\n// this is just REFERENCES\nconst defaultMaterial = new CANNON.Material('default'); // we can name it as we want\n// const plasticMaterial = new CANNON.Material('plastic'); \n\n// Contact material\n// it's a combination of two materials\n// !!! >>> describe how two materials interact with each other\nconst defaultCollideBehaviourMaterial = new CANNON.ContactMaterial(\n    defaultMaterial,\n    defaultMaterial, // 2 mateials that we want to combine\n    {\n        friction: 0.1, // how much they slide on collision\n        restitution: 0.7 // how much they bounce on collision\n    }\n);\n\n// Add contact material to the world\nworld.addContactMaterial(defaultCollideBehaviourMaterial);\nworld.defaultContactMaterial = defaultCollideBehaviourMaterial; // default material for all bodies\n\n\n// If in ThreeJs we create meshes, in cannon we create bodies\n// to create a body we need to create a shape\n\n// Sphere shape:\nconst sphereShape = new CANNON.Sphere(0.5); // radius of threejs sphere geometry\nconst sphereBody = new CANNON.Body({\n    mass: 1,\n    position: new CANNON.Vec3(0, 3, 0),\n    shape: sphereShape,\n    // material: plasticMaterial // we can define material here\n    // it falls down because of gravity, but it not bouncing. \n    // Bouncing and others are properties of Material. \n    // Material is a BEHAVIOUR property of body\n    // Material is just a reference, it's not a some visible\n    // we should create one of each type of material in the scene (plastic, concrete, jelly, etc)\n});\n\n// Interactions with bodies can be done by applying forces\n/**\n * There are many ways to apply forces to a Body:\n\napplyForce to apply a force to the Body from a specified point in space (not necessarily on the Body's surface) like the wind that pushes everything a little all the time, a small but sudden push on a domino or a greater sudden force to make an angry bird jump toward the enemy castle.\napplyImpulse is like applyForce but instead of adding to the force that will result in velocity changes, it applies directly to the velocity.\napplyLocalForce is the same as applyForce but the coordinates are local to the Body (meaning that 0, 0, 0 would be the center of the Body).\napplyLocalImpulse is the same as applyImpulse but the coordinates are local to the Body.\n\n\nBecause using \"force\" methods will result in velocity changes, let's not use \"impulse\" methods\n */\n\n// here we pushing the sphere to the right and it starts jumping and rolling to +X from the start\n// like someone dropped it from the height to the right\n// first argument is the force, second is the position of force\nsphereBody.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0)); // force, point of force\n\nworld.addBody(sphereBody);\n\n// Floor shape:\nconst floorShape = new CANNON.Plane();\nconst floorBody = new CANNON.Body();\n\n// floorBody.material = concreteMaterial;\nfloorBody.mass = 0; // 0 means that it is static\nfloorBody.addShape(floorShape);\n\n// !!! >>> if threejs mesh rotated, we need to ROTATE BODIES attached to it in a same way\nfloorBody.quaternion.setFromAxisAngle(\n    new CANNON.Vec3(-1, 0, 0), \n    Math.PI * 0.5 // horizontal mathematical infinity plane and infinity down, as Ground.\n); // rotate it to be horizontal\n\n\n\nworld.addBody(floorBody);\n\n\n/**\n * Test sphere\n */\nconst sphere = new THREE.Mesh(\n    new THREE.SphereGeometry(0.5, 32, 32),\n    new THREE.MeshStandardMaterial({\n        metalness: 0.3,\n        roughness: 0.4,\n        envMap: environmentMapTexture,\n        envMapIntensity: 0.5\n    })\n)\nsphere.castShadow = true\nsphere.position.y = 0.5\nscene.add(sphere)\n\n/**\n * Floor\n */\nconst floor = new THREE.Mesh(\n    new THREE.PlaneGeometry(10, 10),\n    new THREE.MeshStandardMaterial({\n        color: '#777777',\n        metalness: 0.3,\n        roughness: 0.4,\n        envMap: environmentMapTexture,\n        envMapIntensity: 0.5\n    })\n)\nfloor.receiveShadow = true\nfloor.rotation.x = - Math.PI * 0.5\nscene.add(floor)\n\n/**\n * Lights\n */\nconst ambientLight = new THREE.AmbientLight(0xffffff, 2.1)\nscene.add(ambientLight)\n\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 0.6)\ndirectionalLight.castShadow = true\ndirectionalLight.shadow.mapSize.set(1024, 1024)\ndirectionalLight.shadow.camera.far = 15\ndirectionalLight.shadow.camera.left = - 7\ndirectionalLight.shadow.camera.top = 7\ndirectionalLight.shadow.camera.right = 7\ndirectionalLight.shadow.camera.bottom = - 7\ndirectionalLight.position.set(5, 5, 5)\nscene.add(directionalLight)\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(- 3, 3, 3)\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.shadowMap.enabled = true\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet oldElapsedTime = 0;\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime();\n\n    const deltaTime = elapsedTime - oldElapsedTime;\n\n    oldElapsedTime = elapsedTime;\n\n    // Update physics world\n    // first param is the fixed time step, \n    // second is how much time passed since last step, \n    // third one is how much iterations we want to apply to the physics\n    sphereBody.applyForce(new CANNON.Vec3(-0.5, 0, 0), sphereBody.position); // a bit wind effect\n\n    world.step(1 / 60, deltaTime, 3);\n\n    // Update Threejs world\n    // sphere is falling down, but we need to see it\n    sphere.position.copy(sphereBody.position);\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["GUI","canvas","scene","THREE.Scene","THREE.TextureLoader","cubeTextureLoader","THREE.CubeTextureLoader","environmentMapTexture","world","CANNON.World","defaultMaterial","CANNON.Material","defaultCollideBehaviourMaterial","CANNON.ContactMaterial","sphereShape","CANNON.Sphere","sphereBody","CANNON.Body","CANNON.Vec3","floorShape","CANNON.Plane","floorBody","sphere","THREE.Mesh","THREE.SphereGeometry","THREE.MeshStandardMaterial","floor","THREE.PlaneGeometry","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","clock","THREE.Clock","oldElapsedTime","tick","elapsedTime","deltaTime"],"mappings":"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"}