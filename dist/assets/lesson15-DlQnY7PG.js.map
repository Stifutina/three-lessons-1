{"version":3,"file":"lesson15-DlQnY7PG.js","sources":["../../src/scripts/lesson15.js"],"sourcesContent":["import * as THREE from 'three'\nimport GUI from 'lil-gui'\nimport gsap from 'gsap'\n\n/**\n * Debug\n */\nconst gui = new GUI()\n\nconst parameters = {\n    materialColor: '#ffe0e0',\n    particlesColor: '#7ac6ff',\n}\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Texture to show shades of toon material correctly\nconst textureLoader = new THREE.TextureLoader();\nconst gradientTexture = textureLoader.load('/textures/gradients/5.jpg');\nconst particleTexture = textureLoader.load('/textures/particles/8.png');\n\ngradientTexture.magFilter = THREE.NearestFilter; // to make the gradient texture sharp\n\n// Page sections\nconst material = new THREE.MeshToonMaterial({ \n    color: parameters.materialColor,\n    gradientMap: gradientTexture,\n});\n\n\n// Meshes\nconst objectsDistance = 4;\n\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    material\n);\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    material\n);\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    material\n);\n\nmesh1.position.y = - objectsDistance * 0;\nmesh2.position.y = - objectsDistance * 1;\nmesh3.position.y = - objectsDistance * 2; \n\nmesh1.position.x = - 2;\nmesh2.position.x = 2;\nmesh3.position.x = - 2;\n\nconst sectionMeshes = [mesh1, mesh2, mesh3];\n\nscene.add(mesh1, mesh2, mesh3);\n\n/**\n * Particles\n */\n// Geometry\nconst particlesGeometry = new THREE.BufferGeometry();\nconst count = 1000;\n\nconst positions = new Float32Array(count * 3);\n\nfor (let i = 0; i < count; i++) {\n    const x = (Math.random() - 0.5) * objectsDistance  * sectionMeshes.length;\n    const y = (objectsDistance * 0.5) - (Math.random() * objectsDistance * sectionMeshes.length);\n    const z = (Math.random() - 0.5) * objectsDistance * sectionMeshes.length;\n\n    positions[i * 3 + 0] = x;\n    positions[i * 3 + 1] = y;\n    positions[i * 3 + 2] = z;\n}\n\nparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n// Material\nconst particlesMaterial = new THREE.PointsMaterial({\n    size: 0.2,\n    sizeAttenuation: true,\n    color: parameters.particlesColor,\n    transparent: true,\n    alphaMap: particleTexture,\n});\n\n// Points\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial);\n\nscene.add(particles);\n\n\n/**\n * Lights\n */\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.5)\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 3);\n\ndirectionalLight.position.set(1, 1, 0.2);\n\nscene.add(ambientLight, directionalLight);\n\n\n\n/**\n * Test cube\n */\n// const cube = new THREE.Mesh(\n//     new THREE.BoxGeometry(1, 1, 1),\n//     new THREE.MeshBasicMaterial({ color: parameters.materialColor })\n// )\n// scene.add(cube)\n\n\n/**\n * Edit\n */\n\n\ngui.addColor(parameters, 'materialColor').onChange(() => {\n    material.color.set(parameters.materialColor)\n})\ngui.addColor(parameters, 'particlesColor').onChange(() => {\n    particlesMaterial.color.set(parameters.particlesColor)\n})\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\nconst cameraContainer = new THREE.Group(); // for animation\n\ncamera.position.z = 6\nscene.add(cameraContainer);\ncameraContainer.add(camera)\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true // we can make some elements behind the webgl 3D elements, and some in front of it <<<<< \n});\n// if alpha is false, the background will be black\n// if alpha is true, the background will be transparent and we can set setClearColor to set the color of the background\n// and setClearAlpha to set the opacity of the background\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n\n/**\n * Scroll animation data\n */\n\nlet scrollY = window.scrollY;\nlet currentSection = 0;\n\nwindow.addEventListener('scroll', () => {\n    scrollY = window.scrollY;\n\n    // Animation by sections\n    const newSection = Math.round(scrollY / sizes.height);\n\n    if (newSection !== currentSection) {\n        currentSection = newSection;\n\n        gsap.to(sectionMeshes[currentSection].rotation, {\n            duration: 1.5,\n            ease: 'power2.inOut',\n            y: '+=5',\n            x: '+=6',\n            z: '+=1.3',\n        })\n    }\n})\n\n\n/**\n * Cursor\n */\nconst cursor = {\n    x: 0,\n    y: 0\n};\n\nwindow.addEventListener('mousemove', (event) => {\n    // position of cursor in normalized coordinates to SCREEN CENTER\n    cursor.x = event.clientX / sizes.width - 0.5; // (0 ... 1) / 2\n    cursor.y = event.clientY / sizes.height - 0.5; // -0.5 ... 0.5\n})\n\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet previousTime = 0;\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime();\n    const deltaTime = elapsedTime - previousTime; // to prevent difference on different devices\n\n    previousTime = elapsedTime; // speed should be same on different frame rates\n\n\n    // Animate Parallax\n    const parallaxX = cursor.x * 0.7;\n    const parallaxY = cursor.y *  - 0.7;\n\n    cameraContainer.position.x += (parallaxX - cameraContainer.position.x) * deltaTime * 5;\n    cameraContainer.position.y += (parallaxY - cameraContainer.position.y) * deltaTime * 5;\n\n    // Update camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance;\n    // correct position of camera is srolled pixels, divided by window height, multiplied by objects distance\n\n\n    // Animate objects\n    for (const mesh of sectionMeshes) {\n        mesh.rotation.x += deltaTime * 0.1;\n        mesh.rotation.y += deltaTime * 0.12;\n    }\n\n    particles.rotation.y = elapsedTime * 0.1;\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["gui","GUI","parameters","canvas","scene","THREE.Scene","textureLoader","THREE.TextureLoader","gradientTexture","particleTexture","THREE.NearestFilter","material","THREE.MeshToonMaterial","objectsDistance","mesh1","THREE.Mesh","THREE.TorusGeometry","mesh2","THREE.ConeGeometry","mesh3","THREE.TorusKnotGeometry","sectionMeshes","particlesGeometry","THREE.BufferGeometry","count","positions","i","x","y","z","THREE.BufferAttribute","particlesMaterial","THREE.PointsMaterial","particles","THREE.Points","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","sizes","camera","renderer","THREE.PerspectiveCamera","cameraContainer","THREE.Group","THREE.WebGLRenderer","scrollY","currentSection","newSection","gsap","cursor","event","clock","THREE.Clock","previousTime","tick","elapsedTime","deltaTime","parallaxX","parallaxY","mesh"],"mappings":"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"}