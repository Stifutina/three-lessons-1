{"version":3,"file":"lesson17-2p5zmm78.js","sources":["../../src/scripts/lesson17.js"],"sourcesContent":["import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'\nimport * as CANNON from 'cannon-es';\n\n/**\n * Physics. \n * Physics is always calculating by CPU. Solution - to use Web Workers.\n * \n * There are many physics libraries for Three.js, but the most popular one is cannon.js.\n * We need to decide if we want to use 2D or 3D physics. Some 3D interactions ight be reduced to 2D physics.\n * \n * 3D Physics libraries:\n * Ammo js\n * Cannon js http://schteppe.github.io/cannon.js/docs DOCS <<<\n * Oimo js\n * \n * 2D Physics libraries:\n * Matter js\n * P2 js\n * Planck js\n * Box2D js\n */\n\n/**\n * Debug\n */\nconst gui = new GUI();\nconst debugObject = {};\n\ndebugObject.createSphere = () => {\n    createSphere(Math.random(), {\n        x: (Math.random() - 0.5) * 3,\n        y: 3,\n        z: (Math.random() - 0.5) * 3\n    });\n};\ngui.add(debugObject, 'createSphere');\n\ndebugObject.createBox = () => {\n    createBox(\n        Math.random(),\n        Math.random(),\n        Math.random(), \n        {\n            x: (Math.random() - 0.5) * 3,\n            y: 3,\n            z: (Math.random() - 0.5) * 3\n        }\n    );\n};\ngui.add(debugObject, 'createBox');\n\n// Reset scene\ndebugObject.resetScene = () => {\n    for (const object of objectsToUpdate) {\n        object.mesh.geometry.dispose();\n        object.mesh.material.dispose();\n        scene.remove(object.mesh);\n\n        world.removeBody(object.body);\n    }\n\n    objectsToUpdate.splice(0, objectsToUpdate.length)\n    objectsToUpdate.length = 0;\n};\n\ngui.add(debugObject, 'resetScene');\n\n\n\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene();\n\n\n\n/**\n * Sounds\n * You can listen to events on the Body. That can be useful if you want to do things like play a sound when objects collide or if you want to know if a projectile has touched an enemy.\n * You can listen to events on Body such as 'colide', 'sleep' or 'wakeup'.\n */\nconst hitSound = new Audio('/sounds/hit.mp3'); // native js audio\nlet lastSoundTime = 0;\n\nhitSound.preservesPitch = false;\n\nconst playHitSound = (collision) => {\n    const impactStrength = collision.contact.getImpactVelocityAlongNormal();\n    const currentTime = Date.now();\n\n    console.log('collision', collision);\n    console.log('collision.body.mass', collision.body.mass)\n\n    if (impactStrength > 1.5 && (currentTime - lastSoundTime) > 70) {\n        hitSound.volume = Math.min((impactStrength * (collision.target.mass / 2) / 10), 1);\n        hitSound.playbackRate = 0.25 + (3.75 - collision.target.mass / 3);\n        \n        hitSound.currentTime = 0;\n        hitSound.play();\n        lastSoundTime = currentTime;\n    }\n}\n\n\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader()\nconst cubeTextureLoader = new THREE.CubeTextureLoader()\n\nconst environmentMapTexture = cubeTextureLoader.load([\n    '/textures/environmentMaps/0/px.png',\n    '/textures/environmentMaps/0/nx.png',\n    '/textures/environmentMaps/0/py.png',\n    '/textures/environmentMaps/0/ny.png',\n    '/textures/environmentMaps/0/pz.png',\n    '/textures/environmentMaps/0/nz.png'\n]);\n\n/**\n * Material\n */\nconst sphereMaterial = new THREE.MeshStandardMaterial({\n    metalness: 0.3,\n    roughness: 0.4,\n    envMap: environmentMapTexture,\n    envMapIntensity: 0.5\n});\n\nconst boxMaterial = new THREE.MeshStandardMaterial({\n    metalness: 0.3,\n    roughness: 0.4,\n    envMap: environmentMapTexture,\n});\n\n\n/**\n * Physics\n */\n\n// This needs to be optimized, because on every frame \n\n// CPU is checking every object is it collaiding with another object or not\n// Why would you test the boxes from one pile against the boxes in the other pile? They are too far to be colliding.\n// 1. So we set SAPBroadphase to world.broadphase\n/**\n * There are 3 broadphase algorithms available in Cannon.js:\n   NaiveBroadphase: Tests every Bodies against every other Bodies\n   GridBroadphase: Quadrilles the world and only tests Bodies against other \n                   Bodies in the same grid box or the neighbors' grid boxes.\n   SAPBroadphase (Sweep and prune broadphase): Tests Bodies on arbitrary axes during multiples steps.\n \n   The default broadphase is NaiveBroadphase, and I recommend you to switch to SAPBroadphase.  <<<<<\n   Using this broadphase can eventually generate bugs where a collision doesn't occur, \n   but it's rare, and it involves doing things like moving Bodies very fast.\n   To switch to SAPBroadphase, simply instantiate it in the world.broadphase \n   property and also use this same world as parameter:\n*/\n\n// 2. Another option to optimize is to enable allowSleeping\n/**\n * Even if we use an improved broadphase algorithm, all the Body are tested, even those not moving anymore. We can use a feature called sleep.\n   When the Body speed gets incredibly slow (at a point where you can't see it moving), the Body can fall asleep and won't be tested unless a sufficient force is applied to it by code or if another Body hits it.\n   To activate this feature, simply set the allowSleep property to true on the World\n*/\n\n// World\nconst world = new CANNON.World();\n\nworld.broadphase = new CANNON.SAPBroadphase(world); // SAPBroadphase is better for PERFORMACE!\nworld.allowSleep = true; // allow sleeping for better performance\n\nworld.gravity.set(0, -9.82, 0);\n\n// Materials\n// Material is a BEHAVIOUR property of body\n// this are not visible, but they are used to define how bodies interact with each other\n// this is just REFERENCES\nconst defaultMaterial = new CANNON.Material('default'); // we can name it as we want\n// const plasticMaterial = new CANNON.Material('plastic'); \n\n// Contact material\n// it's a combination of two materials\n// !!! >>> describe how two materials interact with each other\nconst defaultCollideBehaviourMaterial = new CANNON.ContactMaterial(\n    defaultMaterial,\n    defaultMaterial, // 2 mateials that we want to combine\n    {\n        friction: 0.1, // how much they slide on collision\n        restitution: 0.7 // how much they bounce on collision\n    }\n);\n\n// Add contact material to the world\nworld.addContactMaterial(defaultCollideBehaviourMaterial);\nworld.defaultContactMaterial = defaultCollideBehaviourMaterial; // default material for all bodies\n\n\n/***\n * Constraints could be used for interactions:\n   Constraints, as the name suggests, enable constraints between two bodies. \n    They can be used to create joints, hinges, or any other kind of interaction between two or more bodies.\n    HingeConstraint: acts like a door hinge. http://schteppe.github.io/cannon.js/docs/classes/HingeConstraint.html\n    DistanceConstraint: forces the bodies to keep a distance between each other. http://schteppe.github.io/cannon.js/docs/classes/DistanceConstraint.html\n    LockConstraint: merges the bodies like if they were one piece. http://schteppe.github.io/cannon.js/docs/classes/LockConstraint.html\n    PointToPointConstraint: glues the bodies to a specific point. http://schteppe.github.io/cannon.js/docs/classes/PointToPointConstraint.html\n */\n\n\n// If in ThreeJs we create meshes, in cannon we create bodies\n// to create a body we need to create a shape\n\n\n// Interactions with bodies can be done by applying forces\n/**\n * There are many ways to apply forces to a Body:\n\napplyForce to apply a force to the Body from a specified point in space (not necessarily on the Body's surface) like the wind that pushes everything a little all the time, a small but sudden push on a domino or a greater sudden force to make an angry bird jump toward the enemy castle.\napplyImpulse is like applyForce but instead of adding to the force that will result in velocity changes, it applies directly to the velocity.\napplyLocalForce is the same as applyForce but the coordinates are local to the Body (meaning that 0, 0, 0 would be the center of the Body).\napplyLocalImpulse is the same as applyImpulse but the coordinates are local to the Body.\n\n\nBecause using \"force\" methods will result in velocity changes, let's not use \"impulse\" methods\n */\n\n\n\n// Floor shape:\nconst floorShape = new CANNON.Plane();\nconst floorBody = new CANNON.Body();\n\n// floorBody.material = concreteMaterial;\nfloorBody.mass = 0; // 0 means that it is static\nfloorBody.addShape(floorShape);\n\n// !!! >>> if threejs mesh rotated, we need to ROTATE BODIES attached to it in a same way\nfloorBody.quaternion.setFromAxisAngle(\n    new CANNON.Vec3(-1, 0, 0), \n    Math.PI * 0.5 // horizontal mathematical infinity plane and infinity down, like Ground.\n); // rotate it to be horizontal\n\nworld.addBody(floorBody);\n\n\n\n/**\n * Floor\n */\nconst floor = new THREE.Mesh(\n    new THREE.PlaneGeometry(10, 10),\n    new THREE.MeshStandardMaterial({\n        color: '#777777',\n        metalness: 0.3,\n        roughness: 0.4,\n        envMap: environmentMapTexture,\n        envMapIntensity: 0.5\n    })\n)\nfloor.receiveShadow = true\nfloor.rotation.x = - Math.PI * 0.5\nscene.add(floor);\n\n\n// Default Sphere\nconst sphereDefaultGeometry = new THREE.SphereGeometry(1, 20, 20);\n\n// Default Box\nconst boxDefaultGeometry = new THREE.BoxGeometry(1, 1, 1);\n\n// array of objects (meshes) that we want to update\nconst objectsToUpdate = [];\n\n/**\n * Lights\n */\nconst ambientLight = new THREE.AmbientLight(0xffffff, 2.1)\nscene.add(ambientLight)\n\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 0.6)\ndirectionalLight.castShadow = true\ndirectionalLight.shadow.mapSize.set(1024, 1024)\ndirectionalLight.shadow.camera.far = 15\ndirectionalLight.shadow.camera.left = - 7\ndirectionalLight.shadow.camera.top = 7\ndirectionalLight.shadow.camera.right = 7\ndirectionalLight.shadow.camera.bottom = - 7\ndirectionalLight.position.set(5, 5, 5)\nscene.add(directionalLight)\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(- 3, 3, 3)\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.shadowMap.enabled = true\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n\n/**\n * Utils\n */\nconst createSphere = (radius, position) => {\n    // Three.js Mesh\n    const mesh = new THREE.Mesh(\n        sphereDefaultGeometry,\n        sphereMaterial\n    );\n\n    mesh.scale.set(radius, radius, radius);\n    mesh.castShadow = true;\n    mesh.position.copy(position);\n\n    scene.add(mesh);\n\n\n    // Cannon.js Body\n    const shape = new CANNON.Sphere(radius);\n    const body = new CANNON.Body({\n        mass: radius * 10,\n        position: new CANNON.Vec3(position.x, position.y, position.z),\n        shape,\n        material: defaultMaterial\n    });\n\n    body.position.copy(position);\n    body.addEventListener('collide', playHitSound);\n    world.addBody(body);\n\n    // Save in objectsToUpdate\n    objectsToUpdate.push({ mesh, body });\n}\n\ncreateSphere(0.5, { x: 0, y: 3, z: 0 });\n\nconst createBox = (width, height, depth, position) => {\n    // Three.js Mesh\n    const mesh = new THREE.Mesh(boxDefaultGeometry, boxMaterial);\n\n    mesh.scale.set(width, height, depth);\n    mesh.castShadow = true;\n\n    scene.add(mesh);\n\n\n    // Cannon.js Body\n    // sizes should be divided by 2 because we start calculating the math of the Cannonjs shape from the center of the object\n    const shape = new CANNON.Box(new CANNON.Vec3(width / 2, height / 2, depth / 2));\n    const body = new CANNON.Body({\n        mass: 1,\n        shape,\n        material: defaultMaterial\n    });\n\n    body.position.copy(position);\n    body.addEventListener('collide', playHitSound);\n    world.addBody(body);\n\n    // Save in objectsToUpdate\n    objectsToUpdate.push({ mesh, body });\n};\n\n\n\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet oldElapsedTime = 0;\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime();\n\n    const deltaTime = elapsedTime - oldElapsedTime;\n\n    oldElapsedTime = elapsedTime;\n\n    // Update physics world\n\n    world.step(1 / 60, deltaTime, 3);\n\n    // Update Threejs world according to physics world\n    for (const object of objectsToUpdate) {\n        object.mesh.position.copy(object.body.position);\n        object.mesh.quaternion.copy(object.body.quaternion);\n    }\n    \n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["gui","GUI","debugObject","createSphere","createBox","object","objectsToUpdate","scene","world","canvas","THREE.Scene","hitSound","lastSoundTime","playHitSound","collision","impactStrength","currentTime","THREE.TextureLoader","cubeTextureLoader","THREE.CubeTextureLoader","environmentMapTexture","sphereMaterial","THREE.MeshStandardMaterial","boxMaterial","CANNON.World","CANNON.SAPBroadphase","defaultMaterial","CANNON.Material","defaultCollideBehaviourMaterial","CANNON.ContactMaterial","floorShape","CANNON.Plane","floorBody","CANNON.Body","CANNON.Vec3","floor","THREE.Mesh","THREE.PlaneGeometry","sphereDefaultGeometry","THREE.SphereGeometry","boxDefaultGeometry","THREE.BoxGeometry","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","radius","position","mesh","shape","CANNON.Sphere","body","width","height","depth","CANNON.Box","clock","THREE.Clock","oldElapsedTime","tick","elapsedTime","deltaTime"],"mappings":"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"}