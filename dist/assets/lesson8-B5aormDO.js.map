{"version":3,"file":"lesson8-B5aormDO.js","sources":["../../node_modules/three/examples/jsm/loaders/RGBELoader.js","../../src/scripts/lesson8.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: throw new Error( 'THREE.RGBELoader: Read Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_write_error: throw new Error( 'THREE.RGBELoader: Write Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_format_error: throw new Error( 'THREE.RGBELoader: Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: throw new Error( 'THREE.RGBELoader: Memory Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\trgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tconst w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\n\t\tlet data, type;\n\t\tlet numElements;\n\n\t\tswitch ( this.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = floatArray;\n\t\t\t\ttype = FloatType;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = halfArray;\n\t\t\t\ttype = HalfFloatType;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow new Error( 'THREE.RGBELoader: Unsupported type: ' + this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\twidth: w, height: h,\n\t\t\tdata: data,\n\t\t\theader: rgbe_header_info.string,\n\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\texposure: rgbe_header_info.exposure,\n\t\t\ttype: type\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui';\nimport { RGBELoader } from 'three/examples/jsm/Addons.js';\n\n\n// https://gero3.github.io/facetype.js/\n\n/** GUI Debug */\nconst gui = new GUI({\n    title: 'Global Controls',\n    width: 320\n});\nconst globaGUIParams = {\n    sheenColor: new THREE.Color(0xff0000)\n};\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/** ENV Map */\nconst rgbeLoader = new RGBELoader();\n\nrgbeLoader.load('/textures/environmentMap/2k.hdr', (envMap) => {\n    envMap.mapping = THREE.EquirectangularReflectionMapping;\n    scene.background = envMap;\n    scene.environment = envMap;\n});\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 0\ncamera.position.y = 1\ncamera.position.z = 2\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader();\nconst doorColor = textureLoader.load('/textures/door/color.jpg');\nconst doorAlpha = textureLoader.load('/textures/door/alpha.jpg');\nconst doorAmbientOcclusion = textureLoader.load('/textures/door/ambientOcclusion.jpg');\nconst doorHeight = textureLoader.load('/textures/door/height.jpg');\nconst doorMetalness = textureLoader.load('/textures/door/metalness.jpg');\nconst doorNormal = textureLoader.load('/textures/door/normal.jpg');\nconst doorRoughness = textureLoader.load('/textures/door/roughness.jpg');\nconst matcapTexture = textureLoader.load('/textures/matcaps/8.png');\nconst gradientTexture = textureLoader.load('/textures/gradients/3.jpg');\n\ngradientTexture.minFilter = THREE.NearestFilter;\ngradientTexture.magFilter = THREE.NearestFilter;\ngradientTexture.generateMipmaps = false;\n\ndoorColor.colorSpace = THREE.SRGBColorSpace;\nmatcapTexture.colorSpace = THREE.SRGBColorSpace;\n\n/**\n * Materials\n * Shader - an algorithm that decides how the each pixel should look like\n */\n\n/** Mesh basic material */\nconst material = new THREE.MeshBasicMaterial();\n\nmaterial.map = doorColor;\nmaterial.color = new THREE.Color(0x00ff00);\nmaterial.transparent = true; // should be set to true to see the alpha map\nmaterial.opacity = 0.5;\n// material.alphaMap = doorAlpha;\nmaterial.side = THREE.DoubleSide; // to see the back side of the object\n\n/** Normal material */\nconst normalMaterial = new THREE.MeshNormalMaterial(); // normal material can be used to debug the normals of the object\n\n/** Matcap material - the super nice an realistic */\n/** if camera and lights will not move, it's the best option */\nconst matcapMaterial = new THREE.MeshMatcapMaterial();\nmatcapMaterial.matcap = matcapTexture;\nmatcapMaterial.flatShading = true;\n\n/** Depth material */\nconst depthMaterial = new THREE.MeshDepthMaterial();\n\n/** Lambert material */\n/** supports same properties as MeshBasicMaterial and also properties for lights handle */\n/** but it's the first material which requires lights */\n/** Best for Performance */\nconst lambertMaterial = new THREE.MeshLambertMaterial();\n\n/** Phong material */\n/** best than Lambert. Less performance but looks better, without glitches */\nconst phongMaterial = new THREE.MeshPhongMaterial();\nphongMaterial.shininess = 100;\nphongMaterial.specular = new THREE.Color(0x1188ff); // color of the reflection\n\n\n/** Toon material */\n/** similar to Phong material but with a toon effect */\n// requires color for shadow and color for light\nconst toonMaterial = new THREE.MeshToonMaterial();\ntoonMaterial.gradientMap = gradientTexture;\n\n\n/** Standard material */\n/** the best material for most cases */\n/** uses PBR */\n/** supports lights but with a more realistic algorithm and better parameters like roughness and metalness */\nconst standardMaterial = new THREE.MeshStandardMaterial();\nstandardMaterial.metalness = 1;\nstandardMaterial.roughness = 1;\n\nstandardMaterial.map = doorColor;\nstandardMaterial.aoMap = doorAmbientOcclusion;\nstandardMaterial.aoMapIntensity = 1;\nstandardMaterial.displacementMap = doorHeight;\nstandardMaterial.displacementScale = 0.1;\nstandardMaterial.metalnessMap = doorMetalness;\nstandardMaterial.roughnessMap = doorRoughness;\nstandardMaterial.normalMap = doorNormal;\n\ngui.add(standardMaterial, 'metalness').min(0).max(1).step(0.0001);\ngui.add(standardMaterial, 'roughness').min(0).max(1).step(0.0001);\n// standardMaterial.flatShading = true;\n\n\n/** Physical material */\n/** Duplicates Standard material props but has additionaly more realistic parameters */\n/** Super realistic but takes a lot performance */\nconst physicalMaterial = new THREE.MeshPhysicalMaterial();\n\nphysicalMaterial.metalness = 1;\nphysicalMaterial.roughness = 1;\n\nphysicalMaterial.map = doorColor;\nphysicalMaterial.aoMap = doorAmbientOcclusion;\nphysicalMaterial.aoMapIntensity = 1;\nphysicalMaterial.displacementMap = doorHeight;\nphysicalMaterial.displacementScale = 0.1;\nphysicalMaterial.metalnessMap = doorMetalness;\nphysicalMaterial.roughnessMap = doorRoughness;\nphysicalMaterial.normalMap = doorNormal;\n\n/** Clearcoat - is a layer of clearcoat on top of the material. Like a glass layer with its own properties */\n// physicalMaterial.clearcoat = 1;\n// physicalMaterial.clearcoatRoughness = 0;\n\n// gui.add(physicalMaterial, 'clearcoat').min(0).max(1).step(0.0001);\n// gui.add(physicalMaterial, 'clearcoatRoughness').min(0).max(1).step(0.0001);\n\n/** Sheen - highlights material when seen from a narrow angle. Usually on fluffy materials like fabrics. */\n\n// gui.add(physicalMaterial, 'sheen').min(0).max(1).step(0.0001);\n// gui.add(physicalMaterial, 'sheenRoughness').min(0).max(1).step(0.0001);\n\n// physicalMaterial.sheen = 1;\n// physicalMaterial.sheenRoughness = 0.25;\n\n// gui.addColor(globaGUIParams, 'sheenColor').onChange(() => { physicalMaterial.sheenColor.set(globaGUIParams.sheenColor); });\n\n\n/** Irirdescence - is a rainbow effect on the material. */\n\n// gui.add(physicalMaterial, 'iridescence').min(0).max(1).step(0.0001);\n// gui.add(physicalMaterial, 'iridescenceIOR').min(0).max(2.333).step(0.0001);\n// gui.add(physicalMaterial, 'iridescenceThicknessRange', '0').min(0).max(1000).step(1);\n// gui.add(physicalMaterial, 'iridescenceThicknessRange', '1').min(0).max(1000).step(1);\n\n// physicalMaterial.iridescence = 1;\n// physicalMaterial.iridescenceIOR = 2.333;\n// physicalMaterial.iridescenceThicknessRange = [100, 800];\n\n/** Transmission - is a property that allows light to pass through the object. */\n\n/** IOR - Index of refraction */\n/**\n * Diamond - 2.417\n * Water - 1.333\n * Air - 1.000293\n */\ngui.add(physicalMaterial, 'transmission').min(0).max(1).step(0.0001);\ngui.add(physicalMaterial, 'ior').min(1).max(10).step(0.0001);\ngui.add(physicalMaterial, 'thickness').min(0).max(1).step(0.0001);\n\nphysicalMaterial.transmission = 1;\nphysicalMaterial.ior = 1.5;\nphysicalMaterial.thickness = 1.1;\n\n\n// Rougness material\nconst roughnessMaterial = new THREE.MeshPhysicalMaterial();\nroughnessMaterial.roughness = 0.2;\nroughnessMaterial.metalness = 0;\n\nroughnessMaterial.transmission = 1;\nroughnessMaterial.ior = 1.5;\nroughnessMaterial.thickness = 1;\n\n\n/** Meshes */\nconst sphereMesh = new THREE.Mesh(\n    new THREE.SphereGeometry(0.5, 14, 14),\n    matcapMaterial\n)\nconst torusMesh = new THREE.Mesh(\n    new THREE.TorusGeometry(0.3, 0.2, 32, 128),\n    standardMaterial\n)\nconst cubeMesh = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1, 86, 86),\n    roughnessMaterial\n)\nconst thridMesh = new THREE.Mesh(\n    new THREE.TetrahedronGeometry(0.5, 32),\n    physicalMaterial\n)\n\n\n/** Lights */\nconst alight = new THREE.AmbientLight(0xffffff, 0.5);\nconst light = new THREE.PointLight(0xffffff, 30);\n\nsphereMesh.position.x = -1.5;\nthridMesh.position.x = 1.5;\ncubeMesh.position.x = 3;\nlight.position.set(2, 3, 4);\n\nscene.add(sphereMesh, torusMesh, thridMesh, cubeMesh/*, alight, light */);\n\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime();\n    const rotationY = elapsedTime / 10;\n    const rotationX = elapsedTime * -0.15;\n\n    thridMesh.rotation.y = rotationY;\n    torusMesh.rotation.y = rotationY;\n    sphereMesh.rotation.y = rotationY;\n    cubeMesh.rotation.y = rotationY;\n    thridMesh.rotation.x = rotationX;\n    torusMesh.rotation.x = rotationX;\n    sphereMesh.rotation.x = rotationX;\n    cubeMesh.rotation.x = rotationX;\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n"],"names":["RGBELoader","DataTextureLoader","manager","HalfFloatType","buffer","rgbe_error","rgbe_error_code","msg","NEWLINE","fgets","lineLimit","consume","p","i","len","s","chunk","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","line","match","RGBE_ReadPixels_RLE","w","h","scanline_width","data_rgba","offset","pos","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","RGBEByteToRGBHalf","DataUtils","byteArray","rgbe_header_info","image_rgba_data","data","type","numElements","FloatType","floatArray","j","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","LinearSRGBColorSpace","LinearFilter","gui","GUI","THREE.Color","canvas","scene","THREE.Scene","rgbeLoader","envMap","THREE.EquirectangularReflectionMapping","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","textureLoader","THREE.TextureLoader","doorColor","doorAmbientOcclusion","doorHeight","doorMetalness","doorNormal","doorRoughness","matcapTexture","gradientTexture","THREE.NearestFilter","THREE.SRGBColorSpace","material","THREE.MeshBasicMaterial","THREE.DoubleSide","THREE.MeshNormalMaterial","matcapMaterial","THREE.MeshMatcapMaterial","THREE.MeshDepthMaterial","THREE.MeshLambertMaterial","phongMaterial","THREE.MeshPhongMaterial","toonMaterial","THREE.MeshToonMaterial","standardMaterial","THREE.MeshStandardMaterial","physicalMaterial","THREE.MeshPhysicalMaterial","roughnessMaterial","sphereMesh","THREE.Mesh","THREE.SphereGeometry","torusMesh","THREE.TorusGeometry","cubeMesh","THREE.BoxGeometry","thridMesh","THREE.TetrahedronGeometry","THREE.AmbientLight","light","THREE.PointLight","clock","THREE.Clock","tick","elapsedTime","rotationY","rotationX"],"mappings":"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","x_google_ignoreList":[0]}