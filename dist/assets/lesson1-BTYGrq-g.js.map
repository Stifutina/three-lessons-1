{"version":3,"file":"lesson1-BTYGrq-g.js","sources":["../../src/scripts/lesson1.js"],"sourcesContent":["import * as THREE from 'three'\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Object\n */\n// const geometry = new THREE.BoxGeometry(1, 1, 1)\n// const material = new THREE.MeshBasicMaterial({ color: 0xff0000 })\n// const mesh = new THREE.Mesh(geometry, material)\n// scene.add(mesh);\n\n// mesh.position.set(1, 0.07, 0.5);\n// mesh.position.normalize(); // put to 1 1 1 \n\n// console.log('distance from center of the scene to cube position: ', mesh.position.length());\n\n\n// mesh.scale.set(1.2, 1.1, 0.8);\n\n// mesh.rotation.reorder('YXZ'); // order of setting, rotate by y then by x.\n// mesh.rotation.set(Math.PI * 0.25, Math.PI * 0.25, 0);\n// better to use quaternion\n\n\nconst group = new THREE.Group();\nscene.add(group);\n\nconst cube1 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 0xcccccc })\n);\ncube1.position.x = -2;\ngroup.add(cube1);\n\nconst cube2 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 0x777777 })\n);\ngroup.add(cube2);\n\nconst cube3 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 0x444444 })\n);\ncube3.position.x = 2;\ngroup.add(cube3);\n\nconst cube4 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 0x333333 })\n);\ncube4.position.y = -0.5;\ncube4.scale.y = 0.01\ncube4.scale.x = 10\ncube4.scale.z = 10\ngroup.add(cube4);\n\n\ngroup.position.y = 1;\ngroup.scale.y = 2;\ngroup.rotation.y = 1;\n/**\n * Axes helper\n */\nconst axesHelper = new THREE.AxesHelper(3); // 3 -  is a length of stroke\nscene.add(axesHelper);\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: 800,\n    height: 600\n}\n\n/**\n * Camera\n */\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)\ncamera.position.z = 3;\ncamera.position.y = 0.3;\n// camera.position.x = 1;\n\ncamera.lookAt(group.position);\n\nscene.add(camera);\n\nconsole.log('distance from cube to camera: ', group.position.distanceTo(camera.position));\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.render(scene, camera)"],"names":["canvas","scene","THREE.Scene","group","THREE.Group","cube1","THREE.Mesh","THREE.BoxGeometry","THREE.MeshBasicMaterial","cube2","cube3","cube4","axesHelper","THREE.AxesHelper","sizes","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer"],"mappings":"uHAGA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAG9CC,EAAQ,IAAIC,EAuBZC,EAAQ,IAAIC,EAClBH,EAAM,IAAIE,CAAK,EAEf,MAAME,EAAQ,IAAIC,EACd,IAAIC,EAAkB,EAAG,EAAG,CAAC,EAC7B,IAAIC,EAAwB,CAAE,MAAO,QAAU,CAAA,CACnD,EACAH,EAAM,SAAS,EAAI,GACnBF,EAAM,IAAIE,CAAK,EAEf,MAAMI,EAAQ,IAAIH,EACd,IAAIC,EAAkB,EAAG,EAAG,CAAC,EAC7B,IAAIC,EAAwB,CAAE,MAAO,OAAU,CAAA,CACnD,EACAL,EAAM,IAAIM,CAAK,EAEf,MAAMC,EAAQ,IAAIJ,EACd,IAAIC,EAAkB,EAAG,EAAG,CAAC,EAC7B,IAAIC,EAAwB,CAAE,MAAO,OAAU,CAAA,CACnD,EACAE,EAAM,SAAS,EAAI,EACnBP,EAAM,IAAIO,CAAK,EAEf,MAAMC,EAAQ,IAAIL,EACd,IAAIC,EAAkB,EAAG,EAAG,CAAC,EAC7B,IAAIC,EAAwB,CAAE,MAAO,OAAU,CAAA,CACnD,EACAG,EAAM,SAAS,EAAI,IACnBA,EAAM,MAAM,EAAI,IAChBA,EAAM,MAAM,EAAI,GAChBA,EAAM,MAAM,EAAI,GAChBR,EAAM,IAAIQ,CAAK,EAGfR,EAAM,SAAS,EAAI,EACnBA,EAAM,MAAM,EAAI,EAChBA,EAAM,SAAS,EAAI,EAInB,MAAMS,EAAa,IAAIC,EAAiB,CAAC,EACzCZ,EAAM,IAAIW,CAAU,EAKpB,MAAME,EAAQ,CACV,MAAO,IACP,OAAQ,GACZ,EAKMC,EAAS,IAAIC,EAAwB,GAAIF,EAAM,MAAQA,EAAM,MAAM,EACzEC,EAAO,SAAS,EAAI,EACpBA,EAAO,SAAS,EAAI,GAGpBA,EAAO,OAAOZ,EAAM,QAAQ,EAE5BF,EAAM,IAAIc,CAAM,EAEhB,QAAQ,IAAI,iCAAkCZ,EAAM,SAAS,WAAWY,EAAO,QAAQ,CAAC,EAKxF,MAAME,EAAW,IAAIC,EAAoB,CACrC,OAAQlB,CACZ,CAAC,EACDiB,EAAS,QAAQH,EAAM,MAAOA,EAAM,MAAM,EAC1CG,EAAS,OAAOhB,EAAOc,CAAM"}