{"version":3,"file":"lesson14-BmwE2QLK.js","sources":["../../src/scripts/lesson14.js"],"sourcesContent":["import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'\n\n/**\n * Base\n */\n// Debug\nconst gui = new GUI()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Galaxy\n */\nconst parameters = {};\n\nparameters.count = 10000;\nparameters.size = 0.03;\nparameters.radiusX = 5;\nparameters.radiusZ = 7;\nparameters.branches = 3;\nparameters.spin = 1;\nparameters.randomness = 0.7;\nparameters.randomnessPower = 3;\nparameters.insideColor = '#ff9752';\nparameters.outsideColor = '#133ca4';\n\n\n// We need\n// 1. Geometry\n// 2. Material \n// 3. Points\n\nlet geometry = null;\nlet material = null;\nlet points = null;\n\nconst textureLoader = new THREE.TextureLoader()\n\nconst generateGalaxy = () => {\n\n    // CLEAR PREVIOUS GALAXY\n    if (points) {\n        geometry.dispose();\n        material.dispose();\n        scene.remove(points);\n    }\n\n    // GENERATE NEW GALAXY\n\n    // 1. Geometry\n    geometry = new THREE.BufferGeometry();\n\n    const positions = new Float32Array(parameters.count * 3);\n    const colors = new Float32Array(parameters.count * 3);\n    const sizes = new Float32Array(parameters.count * 3);\n    const colorInside = new THREE.Color(parameters.insideColor);\n    const colorOutside = new THREE.Color(parameters.outsideColor);\n    \n    for(let i = 0; i < parameters.count * 3; i++) {\n        const i3 = i * 3;\n\n        // Position\n        const radiusX = parameters.radiusX;\n        const radiusZ = parameters.radiusZ;\n        const aspect = radiusX / radiusZ;\n        const radius = Math.random() * Math.sqrt(radiusX * radiusX + radiusZ * radiusZ);\n\n        const spinAngle = radius * parameters.spin;\n        const branchAngle = ((i % parameters.branches) / parameters.branches) * Math.PI * 2; // angle to next branch\n\n        // Randomness\n        const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) * parameters.randomness;\n        const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) * parameters.randomness;\n        const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) * parameters.randomness;\n\n        positions[i3] = (Math.cos(branchAngle + spinAngle) * radius + randomX) * aspect; // X\n        positions[i3 + 1] = randomY * (1 - radius / Math.sqrt(parameters.radiusX * parameters.radiusX + parameters.radiusZ * parameters.radiusZ)); // Y\n        positions[i3 + 2] = Math.sin(branchAngle + spinAngle ) * radius + randomZ;  // Z\n\n\n        // Color\n        const mixedColor = colorInside.clone();\n\n        mixedColor.lerp(colorOutside, radius / parameters.radiusX);\n\n        colors[i3] = mixedColor.r;\n        colors[i3 + 1] = mixedColor.g;\n        colors[i3 + 2] = mixedColor.b;\n\n        sizes[i] = parameters.size + (1 / radius);\n    }\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 3));\n\n    // 2. Material\n    material = new THREE.ShaderMaterial({\n        uniforms: {\n            pointTexture: { value: textureLoader.load('/textures/particles/8.png') }\n        },\n        vertexShader: `\n            attribute float size;\n            varying vec3 vColor;\n            void main() {\n                vColor = color;\n                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n                gl_PointSize = size * (100.0 / -mvPosition.z);\n                gl_Position = projectionMatrix * mvPosition;\n            }\n        `,\n        fragmentShader: `\n            uniform sampler2D pointTexture;\n            varying vec3 vColor;\n            void main() {\n                gl_FragColor = vec4(vColor, 1.0);\n                gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n            }\n        `,\n        blending: THREE.AdditiveBlending,\n        depthWrite: false,\n        vertexColors: true,\n    });\n\n    material.alphaMap = textureLoader.load('/textures/particles/1.png');\n\n\n    // 3. Points\n    points = new THREE.Points(geometry, material);\n    scene.add(points);\n}\n\n\n\ngui.add(parameters, 'count').min(100).max(100000).step(100).onFinishChange(generateGalaxy);\ngui.add(parameters, 'size').min(0.001).max(0.1).step(0.001).onFinishChange(generateGalaxy);\ngui.add(parameters, 'radiusX').min(1).max(20).step(0.1).onFinishChange(generateGalaxy);\ngui.add(parameters, 'radiusZ').min(1).max(20).step(0.1).onFinishChange(generateGalaxy);\ngui.add(parameters, 'branches').min(2).max(10).step(1).onFinishChange(generateGalaxy);\ngui.add(parameters, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy);\ngui.add(parameters, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy);\ngui.add(parameters, 'randomnessPower').min(1).max(10).step(0.001).onFinishChange(generateGalaxy);\ngui.addColor(parameters, 'insideColor').onFinishChange(generateGalaxy);\ngui.addColor(parameters, 'outsideColor').onFinishChange(generateGalaxy);\n\ngenerateGalaxy();\n\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 3\ncamera.position.y = 3\ncamera.position.z = 3\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime();\n\n    // Update galaxy\n    points.rotation.y = elapsedTime * 0.02;\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["gui","GUI","canvas","scene","THREE.Scene","parameters","geometry","material","points","textureLoader","THREE.TextureLoader","generateGalaxy","THREE.BufferGeometry","positions","colors","sizes","colorInside","THREE.Color","colorOutside","i","i3","radiusX","radiusZ","aspect","radius","spinAngle","branchAngle","randomX","randomY","randomZ","mixedColor","THREE.BufferAttribute","THREE.ShaderMaterial","THREE.AdditiveBlending","THREE.Points","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","clock","THREE.Clock","tick","elapsedTime"],"mappings":"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"}