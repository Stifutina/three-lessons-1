{"version":3,"file":"lesson11-CQwZuOxx.js","sources":["../../src/scripts/lesson11.js"],"sourcesContent":["import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'\n\n/**\n * Base\n */\n// Debug\nconst gui = new GUI()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Lights\n * Cast shadows Only \n *  PointLight, \n *  DirectionalLight and \n *  SpotLight\n * \n * to get shadow we need to \n * 1. set castShadow = true on light\n * 2. set receiveShadow = true on object\n * 3. enable shadowMap on renderer\n * 4. enable castShadow on object\n * \n * we can also set shadow map size to get better quality\n * shadow map available in directionalLight.shadow\n */\n\n// Ambient light, just to see the objects\nconst ambientLight = new THREE.AmbientLight(0xffffff, 1)\ngui.add(ambientLight, 'intensity').min(0).max(3).step(0.001)\nscene.add(ambientLight)\n\n\n\n// Directional light\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1.5)\ndirectionalLight.position.set(2, 2, - 1)\ngui.add(directionalLight, 'intensity').min(0).max(3).step(0.001)\ngui.add(directionalLight.position, 'x').min(- 5).max(5).step(0.001)\ngui.add(directionalLight.position, 'y').min(- 5).max(5).step(0.001)\ngui.add(directionalLight.position, 'z').min(- 5).max(5).step(0.001)\nscene.add(directionalLight)\n\ndirectionalLight.castShadow = false; // say light to cast shadow\ndirectionalLight.visible = false;\n\ndirectionalLight.shadow.mapSize.width = 2048;\ndirectionalLight.shadow.mapSize.height = 2048;\n\n// Directional light uses Orthographic camera to render shadow map, so we can use CameraHelper to visualize it\nconst directionalLightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera);\n\ndirectionalLight.shadow.camera.near = 1;\ndirectionalLight.shadow.camera.far = 6;\ndirectionalLight.shadow.camera.top = 2;\ndirectionalLight.shadow.camera.bottom = - 2;\ndirectionalLight.shadow.camera.left = - 2;\ndirectionalLight.shadow.camera.right = 2;\n\ndirectionalLight.shadow.radius = 10; // not working with THREE.PCFSoftShadowMap\n\nscene.add(directionalLightCameraHelper);\n\ndirectionalLightCameraHelper.visible = false;\n\n\n\n\n// Spot light\nconst spotLight = new THREE.SpotLight(0xffffff, 10, 10, Math.PI * 0.3);\n\n// spotLight.castShadow = true;\nscene.add(spotLight);\n\nspotLight.position.set(0, 2, 2);\n\n// Spot light uses Perspective camera to render shadow map, so we can use CameraHelper to visualize it\nconst spotLightCameraHelper = new THREE.CameraHelper(spotLight.shadow.camera);\n\nscene.add(spotLightCameraHelper);\n\nspotLightCameraHelper.visible = false;\n\nspotLight.shadow.mapSize.width = 1024;\nspotLight.shadow.mapSize.height = 1024;\n\nspotLight.castShadow = false;\nspotLight.visible = false;\n\n/**\n * Need to set near and far correctly to optimize performance\n */\nspotLight.shadow.camera.near = 1;\nspotLight.shadow.camera.far = 6;\n/**\n * In the latest versions of Three.js, the fov cannot be changed and will always be overridden by the angle of the SpotLight.\n */\nspotLight.shadow.camera.fov = 30; // not working\n\n\n\n// Point light\nconst pointLight = new THREE.PointLight(0xffffff, 4)\n\npointLight.castShadow = false;\npointLight.shadow.mapSize.width = 1024;\npointLight.shadow.mapSize.height = 1024;\n\npointLight.shadow.camera.near = 0.1;\npointLight.shadow.camera.far = 5;\n\npointLight.position.set(0, 2, 2);\n\nscene.add(pointLight);\n\n// Point light uses Perspective camera to render shadow map, so we can use CameraHelper to visualize it\n// it renders shadow map in all 6 directions, like an environment cube. The last looking down, that's why camera looks down\nconst pointLightCameraHelper = new THREE.CameraHelper(pointLight.shadow.camera);\nscene.add(pointLightCameraHelper);\n\n// pointLight.visible = false;\npointLightCameraHelper.visible = false;\n\n\n/**\n * Use baked shadow texture to optimize performance\n */\n//Textures used as map and matcap are supposed to be encoded in sRGB.\n//In the latest versions of Three.js we need to specify it by setting their colorSpace to THREE.SRGBColorSpace\nconst textureLoader = new THREE.TextureLoader();\nconst bakedShadowTexture = textureLoader.load('/textures/bakedShadow.jpg');\nconst simpleShadowTexture = textureLoader.load('/textures/simpleShadow.jpg');\n\nbakedShadowTexture.colorSpace = THREE.SRGBColorSpace;\n\n\n/**\n * Materials\n */\nconst materialPlane = new THREE.MeshStandardMaterial();\nconst materialSphere = new THREE.MeshStandardMaterial();\n\nconst bakedShadowMaterial = new THREE.MeshBasicMaterial({ map: bakedShadowTexture }); // use for baked shadow\n\nmaterialPlane.roughness = 0.7\n\ngui.add(materialPlane, 'metalness').min(0).max(1).step(0.001)\ngui.add(materialPlane, 'roughness').min(0).max(1).step(0.001);\n\nmaterialSphere.color = new THREE.Color('yellow');\n\n/**\n * Objects\n */\nconst sphere = new THREE.Mesh(\n    new THREE.SphereGeometry(0.5, 32, 32),\n    materialSphere\n);\n\nconst plane = new THREE.Mesh(\n    new THREE.PlaneGeometry(5, 5),\n    materialPlane\n)\nplane.rotation.x = - Math.PI * 0.5\nplane.position.y = - 0.5\nsphere.castShadow = true;\nplane.receiveShadow = true;\n\nscene.add(sphere, plane);\n\n/**\n * Make simple baked shadows\n */\nconst bakedShadowSphere = new THREE.Mesh(\n    new THREE.PlaneGeometry(1.5, 1.5),\n    new THREE.MeshBasicMaterial({ \n        color: 0x000000,\n        alphaMap: simpleShadowTexture,\n        transparent: true\n    })\n);\n\nbakedShadowSphere.rotation.x = - Math.PI * 0.5;\nbakedShadowSphere.position.y = plane.position.y + 0.01;\n\nscene.add(bakedShadowSphere);\n\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 1\ncamera.position.y = 1\ncamera.position.z = 2\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\nrenderer.shadowMap.enabled = true; // say renderer to handle shadow maps\n\n/**\n * Shadow map algorithms\n * THREE.BasicShadowMap very perfomant but low quality\n * THREE.PCFShadowMap less performant but smoother edges\n * THREE.PCFSoftShadowMap less performant but even softer edges\n * THREE.VSMShadowMap less performant, more constraints, can have unexpected results\n */\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Animate ball\n    sphere.position.x = Math.cos(elapsedTime) * 1.5\n    sphere.position.z = Math.sin(elapsedTime) * 1.5\n    sphere.position.y = Math.abs(Math.sin(elapsedTime * 3));\n    // Update shadow\n    bakedShadowSphere.position.x = sphere.position.x;\n    bakedShadowSphere.position.z = sphere.position.z;\n    bakedShadowSphere.material.opacity = (1 - sphere.position.y) * 0.3;\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["gui","GUI","canvas","scene","THREE.Scene","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","directionalLightCameraHelper","THREE.CameraHelper","spotLight","THREE.SpotLight","spotLightCameraHelper","pointLight","THREE.PointLight","pointLightCameraHelper","textureLoader","THREE.TextureLoader","bakedShadowTexture","simpleShadowTexture","THREE.SRGBColorSpace","materialPlane","THREE.MeshStandardMaterial","materialSphere","THREE.MeshBasicMaterial","THREE.Color","sphere","THREE.Mesh","THREE.SphereGeometry","plane","THREE.PlaneGeometry","bakedShadowSphere","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","clock","THREE.Clock","tick","elapsedTime"],"mappings":"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"}