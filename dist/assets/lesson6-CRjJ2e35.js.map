{"version":3,"file":"lesson6-CRjJ2e35.js","sources":["../../src/scripts/lesson6.js"],"sourcesContent":["import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/Addons.js';\nimport GUI from 'lil-gui';\nimport gsap from 'gsap';\n\n/** GUI Debug */\nconst gui = new GUI({\n    title: 'Global Controls',\n    width: 320\n});\nconst globaGUIParams = {};\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n\n/**\n * Cursor\n */\n\nconst cursor = {\n    x: 0,\n    y: 0\n};\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\n/**\n * Object\n */\nglobaGUIParams.color = '#ff8f8f';\nglobaGUIParams.subdivision = 2;\n\nconst geometry = new THREE.BoxGeometry(1, 1, 1, 2, 2, 2);\nconst material = new THREE.MeshBasicMaterial({ color: globaGUIParams.color });\nconst mesh = new THREE.Mesh(geometry, material);\n\nscene.add(mesh);\n\n/**\n * Camera\n * fov is a vertival angle of view, should be between 45 and 75.\n * \n */\n\nconst camera = new THREE.PerspectiveCamera(60, sizes.width / sizes.height, 0.1, 100);\n\ncamera.position.z = 2;\n\nscene.add(camera);\n\n/**\n * Controls\n */\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n/**\n * Animations\n * tick - a function which will be called on every next free frame \n * V1 with delta time\n */\n\nconst tick = () => {\n    controls.update();\n\n    // take a picture\n    renderer.render(scene, camera);\n    window.requestAnimationFrame(tick);\n}\n\ntick();\n\n\n/**\n * GUI\n */\ngui.add(mesh.position, 'y').min(-5).max(5).step(0.1).name('Elevation');\ngui.add(mesh, 'visible');\ngui.add(material, 'wireframe');\ngui.addColor(globaGUIParams, 'color').onChange((value) => {\n    // handle color difference issue\n    // console.log('Real color: ', value.getHexString());\n    material.color.set(globaGUIParams.color);\n});\nglobaGUIParams.spin = () => {\n    gsap.to(mesh.rotation, {\n        y: mesh.rotation.y + Math.PI * 2,\n        duration: 5\n    })\n}\ngui.add(globaGUIParams, 'spin');\n// we can change color property on fly, \n// but we can't do this to geometry. \n// If somethng changed in geometry property, it should be rebuild\ngui.add(globaGUIParams, 'subdivision').min(1).max(10).step(1).onFinishChange(() => {\n    // But old geometries still in gpu memory. So dispose it\n    mesh.geometry.dispose(); // << Important for performance\n    mesh.geometry = new THREE.BoxGeometry(1, 1, 1, globaGUIParams.subdivision, globaGUIParams.subdivision, globaGUIParams.subdivision);\n});\n\n\n\n\n/**\n * Event listeners\n */\n\nwindow.addEventListener('mousemove', (event) => {\n    cursor.x = event.clientX / sizes.width - 0.5;\n    cursor.y = event.clientY / sizes.height - 0.5;\n});\n\nwindow.addEventListener('resize', () => {\n    // Update sizes\n\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\nwindow.addEventListener('dblclick', () => {\n    const fullscreenElement = document.fullscreenElement || document.webkitFullScreenelement;\n\n    if (!fullscreenElement) {\n        if (canvas.requestFullscreen) {\n            canvas.requestFullscreen();\n        } else if (canvas.webkitRequestFullscreen) {\n            canvas.webkitRequestFullscreen();\n        }\n        \n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n        \n    }\n})"],"names":["gui","GUI","globaGUIParams","canvas","scene","THREE.Scene","sizes","geometry","THREE.BoxGeometry","material","THREE.MeshBasicMaterial","mesh","THREE.Mesh","camera","THREE.PerspectiveCamera","controls","OrbitControls","renderer","THREE.WebGLRenderer","tick","value","gsap","event"],"mappings":"oPAMA,MAAMA,EAAM,IAAIC,EAAI,CAChB,MAAO,kBACP,MAAO,GACX,CAAC,EACKC,EAAiB,CAAE,EAGnBC,EAAS,SAAS,cAAc,cAAc,EAG9CC,EAAQ,IAAIC,EAgBZC,EAAQ,CACV,MAAO,OAAO,WACd,OAAQ,OAAO,WACnB,EAKAJ,EAAe,MAAQ,UACvBA,EAAe,YAAc,EAE7B,MAAMK,EAAW,IAAIC,EAAkB,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACjDC,EAAW,IAAIC,EAAwB,CAAE,MAAOR,EAAe,KAAK,CAAE,EACtES,EAAO,IAAIC,EAAWL,EAAUE,CAAQ,EAE9CL,EAAM,IAAIO,CAAI,EAQd,MAAME,EAAS,IAAIC,EAAwB,GAAIR,EAAM,MAAQA,EAAM,OAAQ,GAAK,GAAG,EAEnFO,EAAO,SAAS,EAAI,EAEpBT,EAAM,IAAIS,CAAM,EAKhB,MAAME,EAAW,IAAIC,EAAcH,EAAQV,CAAM,EACjDY,EAAS,cAAgB,GAMzB,MAAME,EAAW,IAAIC,EAAoB,CACrC,OAAQf,CACZ,CAAC,EACDc,EAAS,QAAQX,EAAM,MAAOA,EAAM,MAAM,EAC1CW,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,CAAC,CAAC,EAQ3D,MAAME,EAAO,IAAM,CACfJ,EAAS,OAAQ,EAGjBE,EAAS,OAAOb,EAAOS,CAAM,EAC7B,OAAO,sBAAsBM,CAAI,CACrC,EAEAA,EAAM,EAMNnB,EAAI,IAAIW,EAAK,SAAU,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,KAAK,EAAG,EAAE,KAAK,WAAW,EACrEX,EAAI,IAAIW,EAAM,SAAS,EACvBX,EAAI,IAAIS,EAAU,WAAW,EAC7BT,EAAI,SAASE,EAAgB,OAAO,EAAE,SAAUkB,GAAU,CAGtDX,EAAS,MAAM,IAAIP,EAAe,KAAK,CAC3C,CAAC,EACDA,EAAe,KAAO,IAAM,CACxBmB,EAAK,GAAGV,EAAK,SAAU,CACnB,EAAGA,EAAK,SAAS,EAAI,KAAK,GAAK,EAC/B,SAAU,CACb,CAAA,CACL,EACAX,EAAI,IAAIE,EAAgB,MAAM,EAI9BF,EAAI,IAAIE,EAAgB,aAAa,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,EAAE,eAAe,IAAM,CAE/ES,EAAK,SAAS,UACdA,EAAK,SAAW,IAAIH,EAAkB,EAAG,EAAG,EAAGN,EAAe,YAAaA,EAAe,YAAaA,EAAe,WAAW,CACrI,CAAC,EASD,OAAO,iBAAiB,YAAcoB,GAAU,CACjCA,EAAM,QAAUhB,EAAM,MAAQ,GAC9BgB,EAAM,QAAUhB,EAAM,OAAS,EAC9C,CAAC,EAED,OAAO,iBAAiB,SAAU,IAAM,CAGpCA,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YAItBO,EAAO,OAASP,EAAM,MAAQA,EAAM,OACpCO,EAAO,uBAAwB,EAC/BI,EAAS,QAAQX,EAAM,MAAOA,EAAM,MAAM,EAC1CW,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,CAAC,CAAC,CAC/D,CAAC,EAED,OAAO,iBAAiB,WAAY,IAAM,CACZ,SAAS,mBAAqB,SAAS,wBAUzD,SAAS,eACT,SAAS,eAAgB,EAClB,SAAS,sBAChB,SAAS,qBAAsB,EAV/Bd,EAAO,kBACPA,EAAO,kBAAmB,EACnBA,EAAO,yBACdA,EAAO,wBAAyB,CAW5C,CAAC"}